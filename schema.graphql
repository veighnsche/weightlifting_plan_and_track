# This file was generated. Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"mutation root"
type mutation_root {
    "delete data from the table: \"wpt_completed_sets\""
    delete_wpt_completed_sets(
        "filter the rows which have to be deleted"
        where: wpt_completed_sets_bool_exp!
    ): wpt_completed_sets_mutation_response
    "delete single row from the table: \"wpt_completed_sets\""
    delete_wpt_completed_sets_by_pk(completed_set_id: uuid!): wpt_completed_sets
    "delete data from the table: \"wpt_completed_workouts\""
    delete_wpt_completed_workouts(
        "filter the rows which have to be deleted"
        where: wpt_completed_workouts_bool_exp!
    ): wpt_completed_workouts_mutation_response
    "delete single row from the table: \"wpt_completed_workouts\""
    delete_wpt_completed_workouts_by_pk(completed_workout_id: uuid!): wpt_completed_workouts
    "delete data from the table: \"wpt_exercises\""
    delete_wpt_exercises(
        "filter the rows which have to be deleted"
        where: wpt_exercises_bool_exp!
    ): wpt_exercises_mutation_response
    "delete single row from the table: \"wpt_exercises\""
    delete_wpt_exercises_by_pk(exercise_id: uuid!): wpt_exercises
    "delete data from the table: \"wpt_set_details\""
    delete_wpt_set_details(
        "filter the rows which have to be deleted"
        where: wpt_set_details_bool_exp!
    ): wpt_set_details_mutation_response
    "delete single row from the table: \"wpt_set_details\""
    delete_wpt_set_details_by_pk(set_detail_id: uuid!): wpt_set_details
    "delete data from the table: \"wpt_set_references\""
    delete_wpt_set_references(
        "filter the rows which have to be deleted"
        where: wpt_set_references_bool_exp!
    ): wpt_set_references_mutation_response
    "delete single row from the table: \"wpt_set_references\""
    delete_wpt_set_references_by_pk(set_reference_id: uuid!): wpt_set_references
    "delete data from the table: \"wpt_workout_exercises\""
    delete_wpt_workout_exercises(
        "filter the rows which have to be deleted"
        where: wpt_workout_exercises_bool_exp!
    ): wpt_workout_exercises_mutation_response
    "delete single row from the table: \"wpt_workout_exercises\""
    delete_wpt_workout_exercises_by_pk(workout_exercise_id: uuid!): wpt_workout_exercises
    "delete data from the table: \"wpt_workouts\""
    delete_wpt_workouts(
        "filter the rows which have to be deleted"
        where: wpt_workouts_bool_exp!
    ): wpt_workouts_mutation_response
    "delete single row from the table: \"wpt_workouts\""
    delete_wpt_workouts_by_pk(workout_id: uuid!): wpt_workouts
    "insert data into the table: \"wpt_completed_sets\""
    insert_wpt_completed_sets(
        "the rows to be inserted"
        objects: [wpt_completed_sets_insert_input!]!,
        "upsert condition"
        on_conflict: wpt_completed_sets_on_conflict
    ): wpt_completed_sets_mutation_response
    "insert a single row into the table: \"wpt_completed_sets\""
    insert_wpt_completed_sets_one(
        "the row to be inserted"
        object: wpt_completed_sets_insert_input!,
        "upsert condition"
        on_conflict: wpt_completed_sets_on_conflict
    ): wpt_completed_sets
    "insert data into the table: \"wpt_completed_workouts\""
    insert_wpt_completed_workouts(
        "the rows to be inserted"
        objects: [wpt_completed_workouts_insert_input!]!,
        "upsert condition"
        on_conflict: wpt_completed_workouts_on_conflict
    ): wpt_completed_workouts_mutation_response
    "insert a single row into the table: \"wpt_completed_workouts\""
    insert_wpt_completed_workouts_one(
        "the row to be inserted"
        object: wpt_completed_workouts_insert_input!,
        "upsert condition"
        on_conflict: wpt_completed_workouts_on_conflict
    ): wpt_completed_workouts
    "insert data into the table: \"wpt_exercises\""
    insert_wpt_exercises(
        "the rows to be inserted"
        objects: [wpt_exercises_insert_input!]!,
        "upsert condition"
        on_conflict: wpt_exercises_on_conflict
    ): wpt_exercises_mutation_response
    "insert a single row into the table: \"wpt_exercises\""
    insert_wpt_exercises_one(
        "the row to be inserted"
        object: wpt_exercises_insert_input!,
        "upsert condition"
        on_conflict: wpt_exercises_on_conflict
    ): wpt_exercises
    "insert data into the table: \"wpt_set_details\""
    insert_wpt_set_details(
        "the rows to be inserted"
        objects: [wpt_set_details_insert_input!]!,
        "upsert condition"
        on_conflict: wpt_set_details_on_conflict
    ): wpt_set_details_mutation_response
    "insert a single row into the table: \"wpt_set_details\""
    insert_wpt_set_details_one(
        "the row to be inserted"
        object: wpt_set_details_insert_input!,
        "upsert condition"
        on_conflict: wpt_set_details_on_conflict
    ): wpt_set_details
    "insert data into the table: \"wpt_set_references\""
    insert_wpt_set_references(
        "the rows to be inserted"
        objects: [wpt_set_references_insert_input!]!,
        "upsert condition"
        on_conflict: wpt_set_references_on_conflict
    ): wpt_set_references_mutation_response
    "insert a single row into the table: \"wpt_set_references\""
    insert_wpt_set_references_one(
        "the row to be inserted"
        object: wpt_set_references_insert_input!,
        "upsert condition"
        on_conflict: wpt_set_references_on_conflict
    ): wpt_set_references
    "insert data into the table: \"wpt_workout_exercises\""
    insert_wpt_workout_exercises(
        "the rows to be inserted"
        objects: [wpt_workout_exercises_insert_input!]!,
        "upsert condition"
        on_conflict: wpt_workout_exercises_on_conflict
    ): wpt_workout_exercises_mutation_response
    "insert a single row into the table: \"wpt_workout_exercises\""
    insert_wpt_workout_exercises_one(
        "the row to be inserted"
        object: wpt_workout_exercises_insert_input!,
        "upsert condition"
        on_conflict: wpt_workout_exercises_on_conflict
    ): wpt_workout_exercises
    "insert data into the table: \"wpt_workouts\""
    insert_wpt_workouts(
        "the rows to be inserted"
        objects: [wpt_workouts_insert_input!]!,
        "upsert condition"
        on_conflict: wpt_workouts_on_conflict
    ): wpt_workouts_mutation_response
    "insert a single row into the table: \"wpt_workouts\""
    insert_wpt_workouts_one(
        "the row to be inserted"
        object: wpt_workouts_insert_input!,
        "upsert condition"
        on_conflict: wpt_workouts_on_conflict
    ): wpt_workouts
    "update data of the table: \"wpt_completed_sets\""
    update_wpt_completed_sets(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: wpt_completed_sets_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: wpt_completed_sets_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: wpt_completed_sets_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: wpt_completed_sets_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_completed_sets_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: wpt_completed_sets_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_completed_sets_set_input,
        "filter the rows which have to be updated"
        where: wpt_completed_sets_bool_exp!
    ): wpt_completed_sets_mutation_response
    "update single row of the table: \"wpt_completed_sets\""
    update_wpt_completed_sets_by_pk(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: wpt_completed_sets_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: wpt_completed_sets_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: wpt_completed_sets_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: wpt_completed_sets_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_completed_sets_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: wpt_completed_sets_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_completed_sets_set_input,
        pk_columns: wpt_completed_sets_pk_columns_input!
    ): wpt_completed_sets
    "update multiples rows of table: \"wpt_completed_sets\""
    update_wpt_completed_sets_many(
        "updates to execute, in order"
        updates: [wpt_completed_sets_updates!]!
    ): [wpt_completed_sets_mutation_response]
    "update data of the table: \"wpt_completed_workouts\""
    update_wpt_completed_workouts(
        "sets the columns of the filtered rows to the given values"
        _set: wpt_completed_workouts_set_input,
        "filter the rows which have to be updated"
        where: wpt_completed_workouts_bool_exp!
    ): wpt_completed_workouts_mutation_response
    "update single row of the table: \"wpt_completed_workouts\""
    update_wpt_completed_workouts_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: wpt_completed_workouts_set_input,
        pk_columns: wpt_completed_workouts_pk_columns_input!
    ): wpt_completed_workouts
    "update multiples rows of table: \"wpt_completed_workouts\""
    update_wpt_completed_workouts_many(
        "updates to execute, in order"
        updates: [wpt_completed_workouts_updates!]!
    ): [wpt_completed_workouts_mutation_response]
    "update data of the table: \"wpt_exercises\""
    update_wpt_exercises(
        "sets the columns of the filtered rows to the given values"
        _set: wpt_exercises_set_input,
        "filter the rows which have to be updated"
        where: wpt_exercises_bool_exp!
    ): wpt_exercises_mutation_response
    "update single row of the table: \"wpt_exercises\""
    update_wpt_exercises_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: wpt_exercises_set_input,
        pk_columns: wpt_exercises_pk_columns_input!
    ): wpt_exercises
    "update multiples rows of table: \"wpt_exercises\""
    update_wpt_exercises_many(
        "updates to execute, in order"
        updates: [wpt_exercises_updates!]!
    ): [wpt_exercises_mutation_response]
    "update data of the table: \"wpt_set_details\""
    update_wpt_set_details(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: wpt_set_details_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: wpt_set_details_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: wpt_set_details_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: wpt_set_details_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_set_details_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: wpt_set_details_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_set_details_set_input,
        "filter the rows which have to be updated"
        where: wpt_set_details_bool_exp!
    ): wpt_set_details_mutation_response
    "update single row of the table: \"wpt_set_details\""
    update_wpt_set_details_by_pk(
        "append existing jsonb value of filtered columns with new jsonb value"
        _append: wpt_set_details_append_input,
        "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
        _delete_at_path: wpt_set_details_delete_at_path_input,
        "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
        _delete_elem: wpt_set_details_delete_elem_input,
        "delete key/value pair or string element. key/value pairs are matched based on their key value"
        _delete_key: wpt_set_details_delete_key_input,
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_set_details_inc_input,
        "prepend existing jsonb value of filtered columns with new jsonb value"
        _prepend: wpt_set_details_prepend_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_set_details_set_input,
        pk_columns: wpt_set_details_pk_columns_input!
    ): wpt_set_details
    "update multiples rows of table: \"wpt_set_details\""
    update_wpt_set_details_many(
        "updates to execute, in order"
        updates: [wpt_set_details_updates!]!
    ): [wpt_set_details_mutation_response]
    "update data of the table: \"wpt_set_references\""
    update_wpt_set_references(
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_set_references_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_set_references_set_input,
        "filter the rows which have to be updated"
        where: wpt_set_references_bool_exp!
    ): wpt_set_references_mutation_response
    "update single row of the table: \"wpt_set_references\""
    update_wpt_set_references_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_set_references_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_set_references_set_input,
        pk_columns: wpt_set_references_pk_columns_input!
    ): wpt_set_references
    "update multiples rows of table: \"wpt_set_references\""
    update_wpt_set_references_many(
        "updates to execute, in order"
        updates: [wpt_set_references_updates!]!
    ): [wpt_set_references_mutation_response]
    "update data of the table: \"wpt_workout_exercises\""
    update_wpt_workout_exercises(
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_workout_exercises_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_workout_exercises_set_input,
        "filter the rows which have to be updated"
        where: wpt_workout_exercises_bool_exp!
    ): wpt_workout_exercises_mutation_response
    "update single row of the table: \"wpt_workout_exercises\""
    update_wpt_workout_exercises_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_workout_exercises_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_workout_exercises_set_input,
        pk_columns: wpt_workout_exercises_pk_columns_input!
    ): wpt_workout_exercises
    "update multiples rows of table: \"wpt_workout_exercises\""
    update_wpt_workout_exercises_many(
        "updates to execute, in order"
        updates: [wpt_workout_exercises_updates!]!
    ): [wpt_workout_exercises_mutation_response]
    "update data of the table: \"wpt_workouts\""
    update_wpt_workouts(
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_workouts_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_workouts_set_input,
        "filter the rows which have to be updated"
        where: wpt_workouts_bool_exp!
    ): wpt_workouts_mutation_response
    "update single row of the table: \"wpt_workouts\""
    update_wpt_workouts_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: wpt_workouts_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: wpt_workouts_set_input,
        pk_columns: wpt_workouts_pk_columns_input!
    ): wpt_workouts
    "update multiples rows of table: \"wpt_workouts\""
    update_wpt_workouts_many(
        "updates to execute, in order"
        updates: [wpt_workouts_updates!]!
    ): [wpt_workouts_mutation_response]
}

type query_root {
    "An array relationship"
    wpt_completed_sets(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): [wpt_completed_sets!]!
    "An aggregate relationship"
    wpt_completed_sets_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): wpt_completed_sets_aggregate!
    "fetch data from the table: \"wpt_completed_sets\" using primary key columns"
    wpt_completed_sets_by_pk(completed_set_id: uuid!): wpt_completed_sets
    "An array relationship"
    wpt_completed_workouts(
        "distinct select on columns"
        distinct_on: [wpt_completed_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_workouts_order_by!],
        "filter the rows returned"
        where: wpt_completed_workouts_bool_exp
    ): [wpt_completed_workouts!]!
    "An aggregate relationship"
    wpt_completed_workouts_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_completed_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_workouts_order_by!],
        "filter the rows returned"
        where: wpt_completed_workouts_bool_exp
    ): wpt_completed_workouts_aggregate!
    "fetch data from the table: \"wpt_completed_workouts\" using primary key columns"
    wpt_completed_workouts_by_pk(completed_workout_id: uuid!): wpt_completed_workouts
    "fetch data from the table: \"wpt_exercises\""
    wpt_exercises(
        "distinct select on columns"
        distinct_on: [wpt_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_exercises_order_by!],
        "filter the rows returned"
        where: wpt_exercises_bool_exp
    ): [wpt_exercises!]!
    "fetch aggregated fields from the table: \"wpt_exercises\""
    wpt_exercises_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_exercises_order_by!],
        "filter the rows returned"
        where: wpt_exercises_bool_exp
    ): wpt_exercises_aggregate!
    "fetch data from the table: \"wpt_exercises\" using primary key columns"
    wpt_exercises_by_pk(exercise_id: uuid!): wpt_exercises
    "An array relationship"
    wpt_set_details(
        "distinct select on columns"
        distinct_on: [wpt_set_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_details_order_by!],
        "filter the rows returned"
        where: wpt_set_details_bool_exp
    ): [wpt_set_details!]!
    "An aggregate relationship"
    wpt_set_details_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_set_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_details_order_by!],
        "filter the rows returned"
        where: wpt_set_details_bool_exp
    ): wpt_set_details_aggregate!
    "fetch data from the table: \"wpt_set_details\" using primary key columns"
    wpt_set_details_by_pk(set_detail_id: uuid!): wpt_set_details
    "An array relationship"
    wpt_set_references(
        "distinct select on columns"
        distinct_on: [wpt_set_references_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_references_order_by!],
        "filter the rows returned"
        where: wpt_set_references_bool_exp
    ): [wpt_set_references!]!
    "An aggregate relationship"
    wpt_set_references_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_set_references_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_references_order_by!],
        "filter the rows returned"
        where: wpt_set_references_bool_exp
    ): wpt_set_references_aggregate!
    "fetch data from the table: \"wpt_set_references\" using primary key columns"
    wpt_set_references_by_pk(set_reference_id: uuid!): wpt_set_references
    "An array relationship"
    wpt_workout_exercises(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): [wpt_workout_exercises!]!
    "An aggregate relationship"
    wpt_workout_exercises_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): wpt_workout_exercises_aggregate!
    "fetch data from the table: \"wpt_workout_exercises\" using primary key columns"
    wpt_workout_exercises_by_pk(workout_exercise_id: uuid!): wpt_workout_exercises
    "fetch data from the table: \"wpt_workouts\""
    wpt_workouts(
        "distinct select on columns"
        distinct_on: [wpt_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workouts_order_by!],
        "filter the rows returned"
        where: wpt_workouts_bool_exp
    ): [wpt_workouts!]!
    "fetch aggregated fields from the table: \"wpt_workouts\""
    wpt_workouts_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workouts_order_by!],
        "filter the rows returned"
        where: wpt_workouts_bool_exp
    ): wpt_workouts_aggregate!
    "fetch data from the table: \"wpt_workouts\" using primary key columns"
    wpt_workouts_by_pk(workout_id: uuid!): wpt_workouts
}

type subscription_root {
    "An array relationship"
    wpt_completed_sets(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): [wpt_completed_sets!]!
    "An aggregate relationship"
    wpt_completed_sets_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): wpt_completed_sets_aggregate!
    "fetch data from the table: \"wpt_completed_sets\" using primary key columns"
    wpt_completed_sets_by_pk(completed_set_id: uuid!): wpt_completed_sets
    "fetch data from the table in a streaming manner: \"wpt_completed_sets\""
    wpt_completed_sets_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [wpt_completed_sets_stream_cursor_input]!,
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): [wpt_completed_sets!]!
    "An array relationship"
    wpt_completed_workouts(
        "distinct select on columns"
        distinct_on: [wpt_completed_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_workouts_order_by!],
        "filter the rows returned"
        where: wpt_completed_workouts_bool_exp
    ): [wpt_completed_workouts!]!
    "An aggregate relationship"
    wpt_completed_workouts_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_completed_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_workouts_order_by!],
        "filter the rows returned"
        where: wpt_completed_workouts_bool_exp
    ): wpt_completed_workouts_aggregate!
    "fetch data from the table: \"wpt_completed_workouts\" using primary key columns"
    wpt_completed_workouts_by_pk(completed_workout_id: uuid!): wpt_completed_workouts
    "fetch data from the table in a streaming manner: \"wpt_completed_workouts\""
    wpt_completed_workouts_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [wpt_completed_workouts_stream_cursor_input]!,
        "filter the rows returned"
        where: wpt_completed_workouts_bool_exp
    ): [wpt_completed_workouts!]!
    "fetch data from the table: \"wpt_exercises\""
    wpt_exercises(
        "distinct select on columns"
        distinct_on: [wpt_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_exercises_order_by!],
        "filter the rows returned"
        where: wpt_exercises_bool_exp
    ): [wpt_exercises!]!
    "fetch aggregated fields from the table: \"wpt_exercises\""
    wpt_exercises_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_exercises_order_by!],
        "filter the rows returned"
        where: wpt_exercises_bool_exp
    ): wpt_exercises_aggregate!
    "fetch data from the table: \"wpt_exercises\" using primary key columns"
    wpt_exercises_by_pk(exercise_id: uuid!): wpt_exercises
    "fetch data from the table in a streaming manner: \"wpt_exercises\""
    wpt_exercises_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [wpt_exercises_stream_cursor_input]!,
        "filter the rows returned"
        where: wpt_exercises_bool_exp
    ): [wpt_exercises!]!
    "An array relationship"
    wpt_set_details(
        "distinct select on columns"
        distinct_on: [wpt_set_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_details_order_by!],
        "filter the rows returned"
        where: wpt_set_details_bool_exp
    ): [wpt_set_details!]!
    "An aggregate relationship"
    wpt_set_details_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_set_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_details_order_by!],
        "filter the rows returned"
        where: wpt_set_details_bool_exp
    ): wpt_set_details_aggregate!
    "fetch data from the table: \"wpt_set_details\" using primary key columns"
    wpt_set_details_by_pk(set_detail_id: uuid!): wpt_set_details
    "fetch data from the table in a streaming manner: \"wpt_set_details\""
    wpt_set_details_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [wpt_set_details_stream_cursor_input]!,
        "filter the rows returned"
        where: wpt_set_details_bool_exp
    ): [wpt_set_details!]!
    "An array relationship"
    wpt_set_references(
        "distinct select on columns"
        distinct_on: [wpt_set_references_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_references_order_by!],
        "filter the rows returned"
        where: wpt_set_references_bool_exp
    ): [wpt_set_references!]!
    "An aggregate relationship"
    wpt_set_references_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_set_references_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_references_order_by!],
        "filter the rows returned"
        where: wpt_set_references_bool_exp
    ): wpt_set_references_aggregate!
    "fetch data from the table: \"wpt_set_references\" using primary key columns"
    wpt_set_references_by_pk(set_reference_id: uuid!): wpt_set_references
    "fetch data from the table in a streaming manner: \"wpt_set_references\""
    wpt_set_references_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [wpt_set_references_stream_cursor_input]!,
        "filter the rows returned"
        where: wpt_set_references_bool_exp
    ): [wpt_set_references!]!
    "An array relationship"
    wpt_workout_exercises(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): [wpt_workout_exercises!]!
    "An aggregate relationship"
    wpt_workout_exercises_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): wpt_workout_exercises_aggregate!
    "fetch data from the table: \"wpt_workout_exercises\" using primary key columns"
    wpt_workout_exercises_by_pk(workout_exercise_id: uuid!): wpt_workout_exercises
    "fetch data from the table in a streaming manner: \"wpt_workout_exercises\""
    wpt_workout_exercises_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [wpt_workout_exercises_stream_cursor_input]!,
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): [wpt_workout_exercises!]!
    "fetch data from the table: \"wpt_workouts\""
    wpt_workouts(
        "distinct select on columns"
        distinct_on: [wpt_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workouts_order_by!],
        "filter the rows returned"
        where: wpt_workouts_bool_exp
    ): [wpt_workouts!]!
    "fetch aggregated fields from the table: \"wpt_workouts\""
    wpt_workouts_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workouts_order_by!],
        "filter the rows returned"
        where: wpt_workouts_bool_exp
    ): wpt_workouts_aggregate!
    "fetch data from the table: \"wpt_workouts\" using primary key columns"
    wpt_workouts_by_pk(workout_id: uuid!): wpt_workouts
    "fetch data from the table in a streaming manner: \"wpt_workouts\""
    wpt_workouts_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [wpt_workouts_stream_cursor_input]!,
        "filter the rows returned"
        where: wpt_workouts_bool_exp
    ): [wpt_workouts!]!
}

"columns and relationships of \"wpt_completed_sets\""
type wpt_completed_sets {
    completed_at: timestamp!
    completed_set_id: uuid!
    completed_workout_id: uuid!
    is_active: Boolean!
    is_archived: Boolean!
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid!
    weight: float8
    weight_adjustment(
        "JSON select path"
        path: String
    ): jsonb
    weight_text: String
    "An object relationship"
    wpt_completed_workout: wpt_completed_workouts!
    "An object relationship"
    wpt_set_detail: wpt_set_details!
}

"aggregated selection of \"wpt_completed_sets\""
type wpt_completed_sets_aggregate {
    aggregate: wpt_completed_sets_aggregate_fields
    nodes: [wpt_completed_sets!]!
}

"aggregate fields of \"wpt_completed_sets\""
type wpt_completed_sets_aggregate_fields {
    avg: wpt_completed_sets_avg_fields
    count(columns: [wpt_completed_sets_select_column!], distinct: Boolean): Int!
    max: wpt_completed_sets_max_fields
    min: wpt_completed_sets_min_fields
    stddev: wpt_completed_sets_stddev_fields
    stddev_pop: wpt_completed_sets_stddev_pop_fields
    stddev_samp: wpt_completed_sets_stddev_samp_fields
    sum: wpt_completed_sets_sum_fields
    var_pop: wpt_completed_sets_var_pop_fields
    var_samp: wpt_completed_sets_var_samp_fields
    variance: wpt_completed_sets_variance_fields
}

"aggregate avg on columns"
type wpt_completed_sets_avg_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate max on columns"
type wpt_completed_sets_max_fields {
    completed_at: timestamp
    completed_set_id: uuid
    completed_workout_id: uuid
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    weight: float8
    weight_text: String
}

"aggregate min on columns"
type wpt_completed_sets_min_fields {
    completed_at: timestamp
    completed_set_id: uuid
    completed_workout_id: uuid
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    weight: float8
    weight_text: String
}

"response of any mutation on the table \"wpt_completed_sets\""
type wpt_completed_sets_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [wpt_completed_sets!]!
}

"aggregate stddev on columns"
type wpt_completed_sets_stddev_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate stddev_pop on columns"
type wpt_completed_sets_stddev_pop_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate stddev_samp on columns"
type wpt_completed_sets_stddev_samp_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate sum on columns"
type wpt_completed_sets_sum_fields {
    rep_count: Int
    rest_time_before: Int
    weight: float8
}

"aggregate var_pop on columns"
type wpt_completed_sets_var_pop_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate var_samp on columns"
type wpt_completed_sets_var_samp_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate variance on columns"
type wpt_completed_sets_variance_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"columns and relationships of \"wpt_completed_workouts\""
type wpt_completed_workouts {
    completed_at: timestamp!
    completed_workout_id: uuid!
    is_active: Boolean!
    is_archived: Boolean!
    note: String
    started_at: timestamp!
    user_uid: String!
    workout_id: uuid!
    "An array relationship"
    wpt_completed_sets(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): [wpt_completed_sets!]!
    "An aggregate relationship"
    wpt_completed_sets_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): wpt_completed_sets_aggregate!
    "An object relationship"
    wpt_workout: wpt_workouts!
}

"aggregated selection of \"wpt_completed_workouts\""
type wpt_completed_workouts_aggregate {
    aggregate: wpt_completed_workouts_aggregate_fields
    nodes: [wpt_completed_workouts!]!
}

"aggregate fields of \"wpt_completed_workouts\""
type wpt_completed_workouts_aggregate_fields {
    count(columns: [wpt_completed_workouts_select_column!], distinct: Boolean): Int!
    max: wpt_completed_workouts_max_fields
    min: wpt_completed_workouts_min_fields
}

"aggregate max on columns"
type wpt_completed_workouts_max_fields {
    completed_at: timestamp
    completed_workout_id: uuid
    note: String
    started_at: timestamp
    user_uid: String
    workout_id: uuid
}

"aggregate min on columns"
type wpt_completed_workouts_min_fields {
    completed_at: timestamp
    completed_workout_id: uuid
    note: String
    started_at: timestamp
    user_uid: String
    workout_id: uuid
}

"response of any mutation on the table \"wpt_completed_workouts\""
type wpt_completed_workouts_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [wpt_completed_workouts!]!
}

"columns and relationships of \"wpt_exercises\""
type wpt_exercises {
    exercise_id: uuid!
    is_archived: Boolean!
    name: String!
    note: String
    user_uid: String!
    "An array relationship"
    wpt_workout_exercises(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): [wpt_workout_exercises!]!
    "An aggregate relationship"
    wpt_workout_exercises_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): wpt_workout_exercises_aggregate!
}

"aggregated selection of \"wpt_exercises\""
type wpt_exercises_aggregate {
    aggregate: wpt_exercises_aggregate_fields
    nodes: [wpt_exercises!]!
}

"aggregate fields of \"wpt_exercises\""
type wpt_exercises_aggregate_fields {
    count(columns: [wpt_exercises_select_column!], distinct: Boolean): Int!
    max: wpt_exercises_max_fields
    min: wpt_exercises_min_fields
}

"aggregate max on columns"
type wpt_exercises_max_fields {
    exercise_id: uuid
    name: String
    note: String
    user_uid: String
}

"aggregate min on columns"
type wpt_exercises_min_fields {
    exercise_id: uuid
    name: String
    note: String
    user_uid: String
}

"response of any mutation on the table \"wpt_exercises\""
type wpt_exercises_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [wpt_exercises!]!
}

"columns and relationships of \"wpt_set_details\""
type wpt_set_details {
    created_at: timestamp!
    is_archived: Boolean!
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid!
    set_reference_id: uuid!
    weight: float8
    weight_adjustment(
        "JSON select path"
        path: String
    ): jsonb
    weight_text: String
    "An array relationship"
    wpt_completed_sets(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): [wpt_completed_sets!]!
    "An aggregate relationship"
    wpt_completed_sets_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_completed_sets_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_sets_order_by!],
        "filter the rows returned"
        where: wpt_completed_sets_bool_exp
    ): wpt_completed_sets_aggregate!
    "An object relationship"
    wpt_set_reference: wpt_set_references!
}

"aggregated selection of \"wpt_set_details\""
type wpt_set_details_aggregate {
    aggregate: wpt_set_details_aggregate_fields
    nodes: [wpt_set_details!]!
}

"aggregate fields of \"wpt_set_details\""
type wpt_set_details_aggregate_fields {
    avg: wpt_set_details_avg_fields
    count(columns: [wpt_set_details_select_column!], distinct: Boolean): Int!
    max: wpt_set_details_max_fields
    min: wpt_set_details_min_fields
    stddev: wpt_set_details_stddev_fields
    stddev_pop: wpt_set_details_stddev_pop_fields
    stddev_samp: wpt_set_details_stddev_samp_fields
    sum: wpt_set_details_sum_fields
    var_pop: wpt_set_details_var_pop_fields
    var_samp: wpt_set_details_var_samp_fields
    variance: wpt_set_details_variance_fields
}

"aggregate avg on columns"
type wpt_set_details_avg_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate max on columns"
type wpt_set_details_max_fields {
    created_at: timestamp
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    set_reference_id: uuid
    weight: float8
    weight_text: String
}

"aggregate min on columns"
type wpt_set_details_min_fields {
    created_at: timestamp
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    set_reference_id: uuid
    weight: float8
    weight_text: String
}

"response of any mutation on the table \"wpt_set_details\""
type wpt_set_details_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [wpt_set_details!]!
}

"aggregate stddev on columns"
type wpt_set_details_stddev_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate stddev_pop on columns"
type wpt_set_details_stddev_pop_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate stddev_samp on columns"
type wpt_set_details_stddev_samp_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate sum on columns"
type wpt_set_details_sum_fields {
    rep_count: Int
    rest_time_before: Int
    weight: float8
}

"aggregate var_pop on columns"
type wpt_set_details_var_pop_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate var_samp on columns"
type wpt_set_details_var_samp_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"aggregate variance on columns"
type wpt_set_details_variance_fields {
    rep_count: Float
    rest_time_before: Float
    weight: Float
}

"columns and relationships of \"wpt_set_references\""
type wpt_set_references {
    is_archived: Boolean!
    note: String
    order_number: Int!
    set_reference_id: uuid!
    workout_exercise_id: uuid!
    "An array relationship"
    wpt_set_details(
        "distinct select on columns"
        distinct_on: [wpt_set_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_details_order_by!],
        "filter the rows returned"
        where: wpt_set_details_bool_exp
    ): [wpt_set_details!]!
    "An aggregate relationship"
    wpt_set_details_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_set_details_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_details_order_by!],
        "filter the rows returned"
        where: wpt_set_details_bool_exp
    ): wpt_set_details_aggregate!
    "An object relationship"
    wpt_workout_exercise: wpt_workout_exercises!
}

"aggregated selection of \"wpt_set_references\""
type wpt_set_references_aggregate {
    aggregate: wpt_set_references_aggregate_fields
    nodes: [wpt_set_references!]!
}

"aggregate fields of \"wpt_set_references\""
type wpt_set_references_aggregate_fields {
    avg: wpt_set_references_avg_fields
    count(columns: [wpt_set_references_select_column!], distinct: Boolean): Int!
    max: wpt_set_references_max_fields
    min: wpt_set_references_min_fields
    stddev: wpt_set_references_stddev_fields
    stddev_pop: wpt_set_references_stddev_pop_fields
    stddev_samp: wpt_set_references_stddev_samp_fields
    sum: wpt_set_references_sum_fields
    var_pop: wpt_set_references_var_pop_fields
    var_samp: wpt_set_references_var_samp_fields
    variance: wpt_set_references_variance_fields
}

"aggregate avg on columns"
type wpt_set_references_avg_fields {
    order_number: Float
}

"aggregate max on columns"
type wpt_set_references_max_fields {
    note: String
    order_number: Int
    set_reference_id: uuid
    workout_exercise_id: uuid
}

"aggregate min on columns"
type wpt_set_references_min_fields {
    note: String
    order_number: Int
    set_reference_id: uuid
    workout_exercise_id: uuid
}

"response of any mutation on the table \"wpt_set_references\""
type wpt_set_references_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [wpt_set_references!]!
}

"aggregate stddev on columns"
type wpt_set_references_stddev_fields {
    order_number: Float
}

"aggregate stddev_pop on columns"
type wpt_set_references_stddev_pop_fields {
    order_number: Float
}

"aggregate stddev_samp on columns"
type wpt_set_references_stddev_samp_fields {
    order_number: Float
}

"aggregate sum on columns"
type wpt_set_references_sum_fields {
    order_number: Int
}

"aggregate var_pop on columns"
type wpt_set_references_var_pop_fields {
    order_number: Float
}

"aggregate var_samp on columns"
type wpt_set_references_var_samp_fields {
    order_number: Float
}

"aggregate variance on columns"
type wpt_set_references_variance_fields {
    order_number: Float
}

"columns and relationships of \"wpt_workout_exercises\""
type wpt_workout_exercises {
    exercise_id: uuid!
    is_archived: Boolean!
    note: String
    order_number: Int
    workout_exercise_id: uuid!
    workout_id: uuid!
    "An object relationship"
    wpt_exercise: wpt_exercises!
    "An array relationship"
    wpt_set_references(
        "distinct select on columns"
        distinct_on: [wpt_set_references_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_references_order_by!],
        "filter the rows returned"
        where: wpt_set_references_bool_exp
    ): [wpt_set_references!]!
    "An aggregate relationship"
    wpt_set_references_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_set_references_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_set_references_order_by!],
        "filter the rows returned"
        where: wpt_set_references_bool_exp
    ): wpt_set_references_aggregate!
    "An object relationship"
    wpt_workout: wpt_workouts!
}

"aggregated selection of \"wpt_workout_exercises\""
type wpt_workout_exercises_aggregate {
    aggregate: wpt_workout_exercises_aggregate_fields
    nodes: [wpt_workout_exercises!]!
}

"aggregate fields of \"wpt_workout_exercises\""
type wpt_workout_exercises_aggregate_fields {
    avg: wpt_workout_exercises_avg_fields
    count(columns: [wpt_workout_exercises_select_column!], distinct: Boolean): Int!
    max: wpt_workout_exercises_max_fields
    min: wpt_workout_exercises_min_fields
    stddev: wpt_workout_exercises_stddev_fields
    stddev_pop: wpt_workout_exercises_stddev_pop_fields
    stddev_samp: wpt_workout_exercises_stddev_samp_fields
    sum: wpt_workout_exercises_sum_fields
    var_pop: wpt_workout_exercises_var_pop_fields
    var_samp: wpt_workout_exercises_var_samp_fields
    variance: wpt_workout_exercises_variance_fields
}

"aggregate avg on columns"
type wpt_workout_exercises_avg_fields {
    order_number: Float
}

"aggregate max on columns"
type wpt_workout_exercises_max_fields {
    exercise_id: uuid
    note: String
    order_number: Int
    workout_exercise_id: uuid
    workout_id: uuid
}

"aggregate min on columns"
type wpt_workout_exercises_min_fields {
    exercise_id: uuid
    note: String
    order_number: Int
    workout_exercise_id: uuid
    workout_id: uuid
}

"response of any mutation on the table \"wpt_workout_exercises\""
type wpt_workout_exercises_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [wpt_workout_exercises!]!
}

"aggregate stddev on columns"
type wpt_workout_exercises_stddev_fields {
    order_number: Float
}

"aggregate stddev_pop on columns"
type wpt_workout_exercises_stddev_pop_fields {
    order_number: Float
}

"aggregate stddev_samp on columns"
type wpt_workout_exercises_stddev_samp_fields {
    order_number: Float
}

"aggregate sum on columns"
type wpt_workout_exercises_sum_fields {
    order_number: Int
}

"aggregate var_pop on columns"
type wpt_workout_exercises_var_pop_fields {
    order_number: Float
}

"aggregate var_samp on columns"
type wpt_workout_exercises_var_samp_fields {
    order_number: Float
}

"aggregate variance on columns"
type wpt_workout_exercises_variance_fields {
    order_number: Float
}

"columns and relationships of \"wpt_workouts\""
type wpt_workouts {
    day_of_week: Int
    is_archived: Boolean!
    name: String!
    note: String
    user_uid: String!
    workout_id: uuid!
    "An array relationship"
    wpt_completed_workouts(
        "distinct select on columns"
        distinct_on: [wpt_completed_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_workouts_order_by!],
        "filter the rows returned"
        where: wpt_completed_workouts_bool_exp
    ): [wpt_completed_workouts!]!
    "An aggregate relationship"
    wpt_completed_workouts_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_completed_workouts_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_completed_workouts_order_by!],
        "filter the rows returned"
        where: wpt_completed_workouts_bool_exp
    ): wpt_completed_workouts_aggregate!
    "An array relationship"
    wpt_workout_exercises(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): [wpt_workout_exercises!]!
    "An aggregate relationship"
    wpt_workout_exercises_aggregate(
        "distinct select on columns"
        distinct_on: [wpt_workout_exercises_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [wpt_workout_exercises_order_by!],
        "filter the rows returned"
        where: wpt_workout_exercises_bool_exp
    ): wpt_workout_exercises_aggregate!
}

"aggregated selection of \"wpt_workouts\""
type wpt_workouts_aggregate {
    aggregate: wpt_workouts_aggregate_fields
    nodes: [wpt_workouts!]!
}

"aggregate fields of \"wpt_workouts\""
type wpt_workouts_aggregate_fields {
    avg: wpt_workouts_avg_fields
    count(columns: [wpt_workouts_select_column!], distinct: Boolean): Int!
    max: wpt_workouts_max_fields
    min: wpt_workouts_min_fields
    stddev: wpt_workouts_stddev_fields
    stddev_pop: wpt_workouts_stddev_pop_fields
    stddev_samp: wpt_workouts_stddev_samp_fields
    sum: wpt_workouts_sum_fields
    var_pop: wpt_workouts_var_pop_fields
    var_samp: wpt_workouts_var_samp_fields
    variance: wpt_workouts_variance_fields
}

"aggregate avg on columns"
type wpt_workouts_avg_fields {
    day_of_week: Float
}

"aggregate max on columns"
type wpt_workouts_max_fields {
    day_of_week: Int
    name: String
    note: String
    user_uid: String
    workout_id: uuid
}

"aggregate min on columns"
type wpt_workouts_min_fields {
    day_of_week: Int
    name: String
    note: String
    user_uid: String
    workout_id: uuid
}

"response of any mutation on the table \"wpt_workouts\""
type wpt_workouts_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [wpt_workouts!]!
}

"aggregate stddev on columns"
type wpt_workouts_stddev_fields {
    day_of_week: Float
}

"aggregate stddev_pop on columns"
type wpt_workouts_stddev_pop_fields {
    day_of_week: Float
}

"aggregate stddev_samp on columns"
type wpt_workouts_stddev_samp_fields {
    day_of_week: Float
}

"aggregate sum on columns"
type wpt_workouts_sum_fields {
    day_of_week: Int
}

"aggregate var_pop on columns"
type wpt_workouts_var_pop_fields {
    day_of_week: Float
}

"aggregate var_samp on columns"
type wpt_workouts_var_samp_fields {
    day_of_week: Float
}

"aggregate variance on columns"
type wpt_workouts_variance_fields {
    day_of_week: Float
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"wpt_completed_sets\""
enum wpt_completed_sets_constraint {
    "unique or primary key constraint on columns \"completed_set_id\""
    PK_148b5f49cf45c0095693d28e6a2
}

"select columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column {
    "column name"
    completed_at
    "column name"
    completed_set_id
    "column name"
    completed_workout_id
    "column name"
    is_active
    "column name"
    is_archived
    "column name"
    note
    "column name"
    rep_count
    "column name"
    rest_time_before
    "column name"
    set_detail_id
    "column name"
    weight
    "column name"
    weight_adjustment
    "column name"
    weight_text
}

"select \"wpt_completed_sets_aggregate_bool_exp_avg_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_avg_arguments_columns {
    "column name"
    weight
}

"select \"wpt_completed_sets_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_bool_and_arguments_columns {
    "column name"
    is_active
    "column name"
    is_archived
}

"select \"wpt_completed_sets_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_bool_or_arguments_columns {
    "column name"
    is_active
    "column name"
    is_archived
}

"select \"wpt_completed_sets_aggregate_bool_exp_corr_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_corr_arguments_columns {
    "column name"
    weight
}

"select \"wpt_completed_sets_aggregate_bool_exp_covar_samp_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_covar_samp_arguments_columns {
    "column name"
    weight
}

"select \"wpt_completed_sets_aggregate_bool_exp_max_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_max_arguments_columns {
    "column name"
    weight
}

"select \"wpt_completed_sets_aggregate_bool_exp_min_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_min_arguments_columns {
    "column name"
    weight
}

"select \"wpt_completed_sets_aggregate_bool_exp_stddev_samp_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_stddev_samp_arguments_columns {
    "column name"
    weight
}

"select \"wpt_completed_sets_aggregate_bool_exp_sum_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_sum_arguments_columns {
    "column name"
    weight
}

"select \"wpt_completed_sets_aggregate_bool_exp_var_samp_arguments_columns\" columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_var_samp_arguments_columns {
    "column name"
    weight
}

"update columns of table \"wpt_completed_sets\""
enum wpt_completed_sets_update_column {
    "column name"
    completed_at
    "column name"
    completed_set_id
    "column name"
    completed_workout_id
    "column name"
    is_active
    "column name"
    is_archived
    "column name"
    note
    "column name"
    rep_count
    "column name"
    rest_time_before
    "column name"
    set_detail_id
    "column name"
    weight
    "column name"
    weight_adjustment
    "column name"
    weight_text
}

"unique or primary key constraints on table \"wpt_completed_workouts\""
enum wpt_completed_workouts_constraint {
    "unique or primary key constraint on columns \"completed_workout_id\""
    PK_ab1c2cb29a19dec7055bf093129
}

"select columns of table \"wpt_completed_workouts\""
enum wpt_completed_workouts_select_column {
    "column name"
    completed_at
    "column name"
    completed_workout_id
    "column name"
    is_active
    "column name"
    is_archived
    "column name"
    note
    "column name"
    started_at
    "column name"
    user_uid
    "column name"
    workout_id
}

"select \"wpt_completed_workouts_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"wpt_completed_workouts\""
enum wpt_completed_workouts_select_column_wpt_completed_workouts_aggregate_bool_exp_bool_and_arguments_columns {
    "column name"
    is_active
    "column name"
    is_archived
}

"select \"wpt_completed_workouts_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"wpt_completed_workouts\""
enum wpt_completed_workouts_select_column_wpt_completed_workouts_aggregate_bool_exp_bool_or_arguments_columns {
    "column name"
    is_active
    "column name"
    is_archived
}

"update columns of table \"wpt_completed_workouts\""
enum wpt_completed_workouts_update_column {
    "column name"
    completed_at
    "column name"
    completed_workout_id
    "column name"
    is_active
    "column name"
    is_archived
    "column name"
    note
    "column name"
    started_at
    "column name"
    user_uid
    "column name"
    workout_id
}

"unique or primary key constraints on table \"wpt_exercises\""
enum wpt_exercises_constraint {
    "unique or primary key constraint on columns \"exercise_id\""
    PK_be1e54d1c2d007ef7e17e52803a
}

"select columns of table \"wpt_exercises\""
enum wpt_exercises_select_column {
    "column name"
    exercise_id
    "column name"
    is_archived
    "column name"
    name
    "column name"
    note
    "column name"
    user_uid
}

"update columns of table \"wpt_exercises\""
enum wpt_exercises_update_column {
    "column name"
    exercise_id
    "column name"
    is_archived
    "column name"
    name
    "column name"
    note
    "column name"
    user_uid
}

"unique or primary key constraints on table \"wpt_set_details\""
enum wpt_set_details_constraint {
    "unique or primary key constraint on columns \"set_detail_id\""
    PK_b0fbcef57c93115bac7fdda7301
}

"select columns of table \"wpt_set_details\""
enum wpt_set_details_select_column {
    "column name"
    created_at
    "column name"
    is_archived
    "column name"
    note
    "column name"
    rep_count
    "column name"
    rest_time_before
    "column name"
    set_detail_id
    "column name"
    set_reference_id
    "column name"
    weight
    "column name"
    weight_adjustment
    "column name"
    weight_text
}

"select \"wpt_set_details_aggregate_bool_exp_avg_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_avg_arguments_columns {
    "column name"
    weight
}

"select \"wpt_set_details_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_bool_and_arguments_columns {
    "column name"
    is_archived
}

"select \"wpt_set_details_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_bool_or_arguments_columns {
    "column name"
    is_archived
}

"select \"wpt_set_details_aggregate_bool_exp_corr_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_corr_arguments_columns {
    "column name"
    weight
}

"select \"wpt_set_details_aggregate_bool_exp_covar_samp_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_covar_samp_arguments_columns {
    "column name"
    weight
}

"select \"wpt_set_details_aggregate_bool_exp_max_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_max_arguments_columns {
    "column name"
    weight
}

"select \"wpt_set_details_aggregate_bool_exp_min_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_min_arguments_columns {
    "column name"
    weight
}

"select \"wpt_set_details_aggregate_bool_exp_stddev_samp_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_stddev_samp_arguments_columns {
    "column name"
    weight
}

"select \"wpt_set_details_aggregate_bool_exp_sum_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_sum_arguments_columns {
    "column name"
    weight
}

"select \"wpt_set_details_aggregate_bool_exp_var_samp_arguments_columns\" columns of table \"wpt_set_details\""
enum wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_var_samp_arguments_columns {
    "column name"
    weight
}

"update columns of table \"wpt_set_details\""
enum wpt_set_details_update_column {
    "column name"
    created_at
    "column name"
    is_archived
    "column name"
    note
    "column name"
    rep_count
    "column name"
    rest_time_before
    "column name"
    set_detail_id
    "column name"
    set_reference_id
    "column name"
    weight
    "column name"
    weight_adjustment
    "column name"
    weight_text
}

"unique or primary key constraints on table \"wpt_set_references\""
enum wpt_set_references_constraint {
    "unique or primary key constraint on columns \"set_reference_id\""
    PK_8e18870ef4d67f9672b1ece4098
}

"select columns of table \"wpt_set_references\""
enum wpt_set_references_select_column {
    "column name"
    is_archived
    "column name"
    note
    "column name"
    order_number
    "column name"
    set_reference_id
    "column name"
    workout_exercise_id
}

"select \"wpt_set_references_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"wpt_set_references\""
enum wpt_set_references_select_column_wpt_set_references_aggregate_bool_exp_bool_and_arguments_columns {
    "column name"
    is_archived
}

"select \"wpt_set_references_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"wpt_set_references\""
enum wpt_set_references_select_column_wpt_set_references_aggregate_bool_exp_bool_or_arguments_columns {
    "column name"
    is_archived
}

"update columns of table \"wpt_set_references\""
enum wpt_set_references_update_column {
    "column name"
    is_archived
    "column name"
    note
    "column name"
    order_number
    "column name"
    set_reference_id
    "column name"
    workout_exercise_id
}

"unique or primary key constraints on table \"wpt_workout_exercises\""
enum wpt_workout_exercises_constraint {
    "unique or primary key constraint on columns \"workout_exercise_id\""
    PK_04c52a0759f4cf9974ce44e1b59
}

"select columns of table \"wpt_workout_exercises\""
enum wpt_workout_exercises_select_column {
    "column name"
    exercise_id
    "column name"
    is_archived
    "column name"
    note
    "column name"
    order_number
    "column name"
    workout_exercise_id
    "column name"
    workout_id
}

"select \"wpt_workout_exercises_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"wpt_workout_exercises\""
enum wpt_workout_exercises_select_column_wpt_workout_exercises_aggregate_bool_exp_bool_and_arguments_columns {
    "column name"
    is_archived
}

"select \"wpt_workout_exercises_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"wpt_workout_exercises\""
enum wpt_workout_exercises_select_column_wpt_workout_exercises_aggregate_bool_exp_bool_or_arguments_columns {
    "column name"
    is_archived
}

"update columns of table \"wpt_workout_exercises\""
enum wpt_workout_exercises_update_column {
    "column name"
    exercise_id
    "column name"
    is_archived
    "column name"
    note
    "column name"
    order_number
    "column name"
    workout_exercise_id
    "column name"
    workout_id
}

"unique or primary key constraints on table \"wpt_workouts\""
enum wpt_workouts_constraint {
    "unique or primary key constraint on columns \"workout_id\""
    PK_3beb3ecc72b6c94869ef3ac0122
}

"select columns of table \"wpt_workouts\""
enum wpt_workouts_select_column {
    "column name"
    day_of_week
    "column name"
    is_archived
    "column name"
    name
    "column name"
    note
    "column name"
    user_uid
    "column name"
    workout_id
}

"update columns of table \"wpt_workouts\""
enum wpt_workouts_update_column {
    "column name"
    day_of_week
    "column name"
    is_archived
    "column name"
    name
    "column name"
    note
    "column name"
    user_uid
    "column name"
    workout_id
}

scalar float8

scalar jsonb

scalar timestamp

scalar uuid

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to compare columns of type \"float8\". All fields are combined with logical 'AND'."
input float8_comparison_exp {
    _eq: float8
    _gt: float8
    _gte: float8
    _in: [float8!]
    _is_null: Boolean
    _lt: float8
    _lte: float8
    _neq: float8
    _nin: [float8!]
}

input jsonb_cast_exp {
    String: String_comparison_exp
}

"Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'."
input jsonb_comparison_exp {
    _cast: jsonb_cast_exp
    "is the column contained in the given json value"
    _contained_in: jsonb
    "does the column contain the given json value at the top level"
    _contains: jsonb
    _eq: jsonb
    _gt: jsonb
    _gte: jsonb
    "does the string exist as a top-level key in the column"
    _has_key: String
    "do all of these strings exist as top-level keys in the column"
    _has_keys_all: [String!]
    "do any of these strings exist as top-level keys in the column"
    _has_keys_any: [String!]
    _in: [jsonb!]
    _is_null: Boolean
    _lt: jsonb
    _lte: jsonb
    _neq: jsonb
    _nin: [jsonb!]
}

"Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'."
input timestamp_comparison_exp {
    _eq: timestamp
    _gt: timestamp
    _gte: timestamp
    _in: [timestamp!]
    _is_null: Boolean
    _lt: timestamp
    _lte: timestamp
    _neq: timestamp
    _nin: [timestamp!]
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}

input wpt_completed_sets_aggregate_bool_exp {
    avg: wpt_completed_sets_aggregate_bool_exp_avg
    bool_and: wpt_completed_sets_aggregate_bool_exp_bool_and
    bool_or: wpt_completed_sets_aggregate_bool_exp_bool_or
    corr: wpt_completed_sets_aggregate_bool_exp_corr
    count: wpt_completed_sets_aggregate_bool_exp_count
    covar_samp: wpt_completed_sets_aggregate_bool_exp_covar_samp
    max: wpt_completed_sets_aggregate_bool_exp_max
    min: wpt_completed_sets_aggregate_bool_exp_min
    stddev_samp: wpt_completed_sets_aggregate_bool_exp_stddev_samp
    sum: wpt_completed_sets_aggregate_bool_exp_sum
    var_samp: wpt_completed_sets_aggregate_bool_exp_var_samp
}

input wpt_completed_sets_aggregate_bool_exp_avg {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_avg_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_bool_and {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_bool_and_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_bool_or {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_bool_or_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_corr {
    arguments: wpt_completed_sets_aggregate_bool_exp_corr_arguments!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_corr_arguments {
    X: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_corr_arguments_columns!
    Y: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_corr_arguments_columns!
}

input wpt_completed_sets_aggregate_bool_exp_count {
    arguments: [wpt_completed_sets_select_column!]
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: Int_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_covar_samp {
    arguments: wpt_completed_sets_aggregate_bool_exp_covar_samp_arguments!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_covar_samp_arguments {
    X: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_covar_samp_arguments_columns!
    Y: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_covar_samp_arguments_columns!
}

input wpt_completed_sets_aggregate_bool_exp_max {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_max_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_min {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_min_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_stddev_samp {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_stddev_samp_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_sum {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_sum_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_completed_sets_aggregate_bool_exp_var_samp {
    arguments: wpt_completed_sets_select_column_wpt_completed_sets_aggregate_bool_exp_var_samp_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_sets_bool_exp
    predicate: float8_comparison_exp!
}

"order by aggregate values of table \"wpt_completed_sets\""
input wpt_completed_sets_aggregate_order_by {
    avg: wpt_completed_sets_avg_order_by
    count: order_by
    max: wpt_completed_sets_max_order_by
    min: wpt_completed_sets_min_order_by
    stddev: wpt_completed_sets_stddev_order_by
    stddev_pop: wpt_completed_sets_stddev_pop_order_by
    stddev_samp: wpt_completed_sets_stddev_samp_order_by
    sum: wpt_completed_sets_sum_order_by
    var_pop: wpt_completed_sets_var_pop_order_by
    var_samp: wpt_completed_sets_var_samp_order_by
    variance: wpt_completed_sets_variance_order_by
}

"append existing jsonb value of filtered columns with new jsonb value"
input wpt_completed_sets_append_input {
    weight_adjustment: jsonb
}

"input type for inserting array relation for remote table \"wpt_completed_sets\""
input wpt_completed_sets_arr_rel_insert_input {
    data: [wpt_completed_sets_insert_input!]!
    "upsert condition"
    on_conflict: wpt_completed_sets_on_conflict
}

"order by avg() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_avg_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"Boolean expression to filter rows from the table \"wpt_completed_sets\". All fields are combined with a logical 'AND'."
input wpt_completed_sets_bool_exp {
    _and: [wpt_completed_sets_bool_exp!]
    _not: wpt_completed_sets_bool_exp
    _or: [wpt_completed_sets_bool_exp!]
    completed_at: timestamp_comparison_exp
    completed_set_id: uuid_comparison_exp
    completed_workout_id: uuid_comparison_exp
    is_active: Boolean_comparison_exp
    is_archived: Boolean_comparison_exp
    note: String_comparison_exp
    rep_count: Int_comparison_exp
    rest_time_before: Int_comparison_exp
    set_detail_id: uuid_comparison_exp
    weight: float8_comparison_exp
    weight_adjustment: jsonb_comparison_exp
    weight_text: String_comparison_exp
    wpt_completed_workout: wpt_completed_workouts_bool_exp
    wpt_set_detail: wpt_set_details_bool_exp
}

"delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
input wpt_completed_sets_delete_at_path_input {
    weight_adjustment: [String!]
}

"delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
input wpt_completed_sets_delete_elem_input {
    weight_adjustment: Int
}

"delete key/value pair or string element. key/value pairs are matched based on their key value"
input wpt_completed_sets_delete_key_input {
    weight_adjustment: String
}

"input type for incrementing numeric columns in table \"wpt_completed_sets\""
input wpt_completed_sets_inc_input {
    rep_count: Int
    rest_time_before: Int
    weight: float8
}

"input type for inserting data into table \"wpt_completed_sets\""
input wpt_completed_sets_insert_input {
    completed_at: timestamp
    completed_set_id: uuid
    completed_workout_id: uuid
    is_active: Boolean
    is_archived: Boolean
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    weight: float8
    weight_adjustment: jsonb
    weight_text: String
    wpt_completed_workout: wpt_completed_workouts_obj_rel_insert_input
    wpt_set_detail: wpt_set_details_obj_rel_insert_input
}

"order by max() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_max_order_by {
    completed_at: order_by
    completed_set_id: order_by
    completed_workout_id: order_by
    note: order_by
    rep_count: order_by
    rest_time_before: order_by
    set_detail_id: order_by
    weight: order_by
    weight_text: order_by
}

"order by min() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_min_order_by {
    completed_at: order_by
    completed_set_id: order_by
    completed_workout_id: order_by
    note: order_by
    rep_count: order_by
    rest_time_before: order_by
    set_detail_id: order_by
    weight: order_by
    weight_text: order_by
}

"on_conflict condition type for table \"wpt_completed_sets\""
input wpt_completed_sets_on_conflict {
    constraint: wpt_completed_sets_constraint!
    update_columns: [wpt_completed_sets_update_column!]! = []
    where: wpt_completed_sets_bool_exp
}

"Ordering options when selecting data from \"wpt_completed_sets\"."
input wpt_completed_sets_order_by {
    completed_at: order_by
    completed_set_id: order_by
    completed_workout_id: order_by
    is_active: order_by
    is_archived: order_by
    note: order_by
    rep_count: order_by
    rest_time_before: order_by
    set_detail_id: order_by
    weight: order_by
    weight_adjustment: order_by
    weight_text: order_by
    wpt_completed_workout: wpt_completed_workouts_order_by
    wpt_set_detail: wpt_set_details_order_by
}

"primary key columns input for table: wpt_completed_sets"
input wpt_completed_sets_pk_columns_input {
    completed_set_id: uuid!
}

"prepend existing jsonb value of filtered columns with new jsonb value"
input wpt_completed_sets_prepend_input {
    weight_adjustment: jsonb
}

"input type for updating data in table \"wpt_completed_sets\""
input wpt_completed_sets_set_input {
    completed_at: timestamp
    completed_set_id: uuid
    completed_workout_id: uuid
    is_active: Boolean
    is_archived: Boolean
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    weight: float8
    weight_adjustment: jsonb
    weight_text: String
}

"order by stddev() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_stddev_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by stddev_pop() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_stddev_pop_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by stddev_samp() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_stddev_samp_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"Streaming cursor of the table \"wpt_completed_sets\""
input wpt_completed_sets_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: wpt_completed_sets_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input wpt_completed_sets_stream_cursor_value_input {
    completed_at: timestamp
    completed_set_id: uuid
    completed_workout_id: uuid
    is_active: Boolean
    is_archived: Boolean
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    weight: float8
    weight_adjustment: jsonb
    weight_text: String
}

"order by sum() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_sum_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

input wpt_completed_sets_updates {
    "append existing jsonb value of filtered columns with new jsonb value"
    _append: wpt_completed_sets_append_input
    "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
    _delete_at_path: wpt_completed_sets_delete_at_path_input
    "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
    _delete_elem: wpt_completed_sets_delete_elem_input
    "delete key/value pair or string element. key/value pairs are matched based on their key value"
    _delete_key: wpt_completed_sets_delete_key_input
    "increments the numeric columns with given value of the filtered values"
    _inc: wpt_completed_sets_inc_input
    "prepend existing jsonb value of filtered columns with new jsonb value"
    _prepend: wpt_completed_sets_prepend_input
    "sets the columns of the filtered rows to the given values"
    _set: wpt_completed_sets_set_input
    "filter the rows which have to be updated"
    where: wpt_completed_sets_bool_exp!
}

"order by var_pop() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_var_pop_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by var_samp() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_var_samp_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by variance() on columns of table \"wpt_completed_sets\""
input wpt_completed_sets_variance_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

input wpt_completed_workouts_aggregate_bool_exp {
    bool_and: wpt_completed_workouts_aggregate_bool_exp_bool_and
    bool_or: wpt_completed_workouts_aggregate_bool_exp_bool_or
    count: wpt_completed_workouts_aggregate_bool_exp_count
}

input wpt_completed_workouts_aggregate_bool_exp_bool_and {
    arguments: wpt_completed_workouts_select_column_wpt_completed_workouts_aggregate_bool_exp_bool_and_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_workouts_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_completed_workouts_aggregate_bool_exp_bool_or {
    arguments: wpt_completed_workouts_select_column_wpt_completed_workouts_aggregate_bool_exp_bool_or_arguments_columns!
    distinct: Boolean
    filter: wpt_completed_workouts_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_completed_workouts_aggregate_bool_exp_count {
    arguments: [wpt_completed_workouts_select_column!]
    distinct: Boolean
    filter: wpt_completed_workouts_bool_exp
    predicate: Int_comparison_exp!
}

"order by aggregate values of table \"wpt_completed_workouts\""
input wpt_completed_workouts_aggregate_order_by {
    count: order_by
    max: wpt_completed_workouts_max_order_by
    min: wpt_completed_workouts_min_order_by
}

"input type for inserting array relation for remote table \"wpt_completed_workouts\""
input wpt_completed_workouts_arr_rel_insert_input {
    data: [wpt_completed_workouts_insert_input!]!
    "upsert condition"
    on_conflict: wpt_completed_workouts_on_conflict
}

"Boolean expression to filter rows from the table \"wpt_completed_workouts\". All fields are combined with a logical 'AND'."
input wpt_completed_workouts_bool_exp {
    _and: [wpt_completed_workouts_bool_exp!]
    _not: wpt_completed_workouts_bool_exp
    _or: [wpt_completed_workouts_bool_exp!]
    completed_at: timestamp_comparison_exp
    completed_workout_id: uuid_comparison_exp
    is_active: Boolean_comparison_exp
    is_archived: Boolean_comparison_exp
    note: String_comparison_exp
    started_at: timestamp_comparison_exp
    user_uid: String_comparison_exp
    workout_id: uuid_comparison_exp
    wpt_completed_sets: wpt_completed_sets_bool_exp
    wpt_completed_sets_aggregate: wpt_completed_sets_aggregate_bool_exp
    wpt_workout: wpt_workouts_bool_exp
}

"input type for inserting data into table \"wpt_completed_workouts\""
input wpt_completed_workouts_insert_input {
    completed_at: timestamp
    completed_workout_id: uuid
    is_active: Boolean
    is_archived: Boolean
    note: String
    started_at: timestamp
    user_uid: String
    workout_id: uuid
    wpt_completed_sets: wpt_completed_sets_arr_rel_insert_input
    wpt_workout: wpt_workouts_obj_rel_insert_input
}

"order by max() on columns of table \"wpt_completed_workouts\""
input wpt_completed_workouts_max_order_by {
    completed_at: order_by
    completed_workout_id: order_by
    note: order_by
    started_at: order_by
    user_uid: order_by
    workout_id: order_by
}

"order by min() on columns of table \"wpt_completed_workouts\""
input wpt_completed_workouts_min_order_by {
    completed_at: order_by
    completed_workout_id: order_by
    note: order_by
    started_at: order_by
    user_uid: order_by
    workout_id: order_by
}

"input type for inserting object relation for remote table \"wpt_completed_workouts\""
input wpt_completed_workouts_obj_rel_insert_input {
    data: wpt_completed_workouts_insert_input!
    "upsert condition"
    on_conflict: wpt_completed_workouts_on_conflict
}

"on_conflict condition type for table \"wpt_completed_workouts\""
input wpt_completed_workouts_on_conflict {
    constraint: wpt_completed_workouts_constraint!
    update_columns: [wpt_completed_workouts_update_column!]! = []
    where: wpt_completed_workouts_bool_exp
}

"Ordering options when selecting data from \"wpt_completed_workouts\"."
input wpt_completed_workouts_order_by {
    completed_at: order_by
    completed_workout_id: order_by
    is_active: order_by
    is_archived: order_by
    note: order_by
    started_at: order_by
    user_uid: order_by
    workout_id: order_by
    wpt_completed_sets_aggregate: wpt_completed_sets_aggregate_order_by
    wpt_workout: wpt_workouts_order_by
}

"primary key columns input for table: wpt_completed_workouts"
input wpt_completed_workouts_pk_columns_input {
    completed_workout_id: uuid!
}

"input type for updating data in table \"wpt_completed_workouts\""
input wpt_completed_workouts_set_input {
    completed_at: timestamp
    completed_workout_id: uuid
    is_active: Boolean
    is_archived: Boolean
    note: String
    started_at: timestamp
    user_uid: String
    workout_id: uuid
}

"Streaming cursor of the table \"wpt_completed_workouts\""
input wpt_completed_workouts_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: wpt_completed_workouts_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input wpt_completed_workouts_stream_cursor_value_input {
    completed_at: timestamp
    completed_workout_id: uuid
    is_active: Boolean
    is_archived: Boolean
    note: String
    started_at: timestamp
    user_uid: String
    workout_id: uuid
}

input wpt_completed_workouts_updates {
    "sets the columns of the filtered rows to the given values"
    _set: wpt_completed_workouts_set_input
    "filter the rows which have to be updated"
    where: wpt_completed_workouts_bool_exp!
}

"Boolean expression to filter rows from the table \"wpt_exercises\". All fields are combined with a logical 'AND'."
input wpt_exercises_bool_exp {
    _and: [wpt_exercises_bool_exp!]
    _not: wpt_exercises_bool_exp
    _or: [wpt_exercises_bool_exp!]
    exercise_id: uuid_comparison_exp
    is_archived: Boolean_comparison_exp
    name: String_comparison_exp
    note: String_comparison_exp
    user_uid: String_comparison_exp
    wpt_workout_exercises: wpt_workout_exercises_bool_exp
    wpt_workout_exercises_aggregate: wpt_workout_exercises_aggregate_bool_exp
}

"input type for inserting data into table \"wpt_exercises\""
input wpt_exercises_insert_input {
    exercise_id: uuid
    is_archived: Boolean
    name: String
    note: String
    user_uid: String
    wpt_workout_exercises: wpt_workout_exercises_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"wpt_exercises\""
input wpt_exercises_obj_rel_insert_input {
    data: wpt_exercises_insert_input!
    "upsert condition"
    on_conflict: wpt_exercises_on_conflict
}

"on_conflict condition type for table \"wpt_exercises\""
input wpt_exercises_on_conflict {
    constraint: wpt_exercises_constraint!
    update_columns: [wpt_exercises_update_column!]! = []
    where: wpt_exercises_bool_exp
}

"Ordering options when selecting data from \"wpt_exercises\"."
input wpt_exercises_order_by {
    exercise_id: order_by
    is_archived: order_by
    name: order_by
    note: order_by
    user_uid: order_by
    wpt_workout_exercises_aggregate: wpt_workout_exercises_aggregate_order_by
}

"primary key columns input for table: wpt_exercises"
input wpt_exercises_pk_columns_input {
    exercise_id: uuid!
}

"input type for updating data in table \"wpt_exercises\""
input wpt_exercises_set_input {
    exercise_id: uuid
    is_archived: Boolean
    name: String
    note: String
    user_uid: String
}

"Streaming cursor of the table \"wpt_exercises\""
input wpt_exercises_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: wpt_exercises_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input wpt_exercises_stream_cursor_value_input {
    exercise_id: uuid
    is_archived: Boolean
    name: String
    note: String
    user_uid: String
}

input wpt_exercises_updates {
    "sets the columns of the filtered rows to the given values"
    _set: wpt_exercises_set_input
    "filter the rows which have to be updated"
    where: wpt_exercises_bool_exp!
}

input wpt_set_details_aggregate_bool_exp {
    avg: wpt_set_details_aggregate_bool_exp_avg
    bool_and: wpt_set_details_aggregate_bool_exp_bool_and
    bool_or: wpt_set_details_aggregate_bool_exp_bool_or
    corr: wpt_set_details_aggregate_bool_exp_corr
    count: wpt_set_details_aggregate_bool_exp_count
    covar_samp: wpt_set_details_aggregate_bool_exp_covar_samp
    max: wpt_set_details_aggregate_bool_exp_max
    min: wpt_set_details_aggregate_bool_exp_min
    stddev_samp: wpt_set_details_aggregate_bool_exp_stddev_samp
    sum: wpt_set_details_aggregate_bool_exp_sum
    var_samp: wpt_set_details_aggregate_bool_exp_var_samp
}

input wpt_set_details_aggregate_bool_exp_avg {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_avg_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_bool_and {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_bool_and_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_bool_or {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_bool_or_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_corr {
    arguments: wpt_set_details_aggregate_bool_exp_corr_arguments!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_corr_arguments {
    X: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_corr_arguments_columns!
    Y: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_corr_arguments_columns!
}

input wpt_set_details_aggregate_bool_exp_count {
    arguments: [wpt_set_details_select_column!]
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: Int_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_covar_samp {
    arguments: wpt_set_details_aggregate_bool_exp_covar_samp_arguments!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_covar_samp_arguments {
    X: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_covar_samp_arguments_columns!
    Y: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_covar_samp_arguments_columns!
}

input wpt_set_details_aggregate_bool_exp_max {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_max_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_min {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_min_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_stddev_samp {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_stddev_samp_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_sum {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_sum_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

input wpt_set_details_aggregate_bool_exp_var_samp {
    arguments: wpt_set_details_select_column_wpt_set_details_aggregate_bool_exp_var_samp_arguments_columns!
    distinct: Boolean
    filter: wpt_set_details_bool_exp
    predicate: float8_comparison_exp!
}

"order by aggregate values of table \"wpt_set_details\""
input wpt_set_details_aggregate_order_by {
    avg: wpt_set_details_avg_order_by
    count: order_by
    max: wpt_set_details_max_order_by
    min: wpt_set_details_min_order_by
    stddev: wpt_set_details_stddev_order_by
    stddev_pop: wpt_set_details_stddev_pop_order_by
    stddev_samp: wpt_set_details_stddev_samp_order_by
    sum: wpt_set_details_sum_order_by
    var_pop: wpt_set_details_var_pop_order_by
    var_samp: wpt_set_details_var_samp_order_by
    variance: wpt_set_details_variance_order_by
}

"append existing jsonb value of filtered columns with new jsonb value"
input wpt_set_details_append_input {
    weight_adjustment: jsonb
}

"input type for inserting array relation for remote table \"wpt_set_details\""
input wpt_set_details_arr_rel_insert_input {
    data: [wpt_set_details_insert_input!]!
    "upsert condition"
    on_conflict: wpt_set_details_on_conflict
}

"order by avg() on columns of table \"wpt_set_details\""
input wpt_set_details_avg_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"Boolean expression to filter rows from the table \"wpt_set_details\". All fields are combined with a logical 'AND'."
input wpt_set_details_bool_exp {
    _and: [wpt_set_details_bool_exp!]
    _not: wpt_set_details_bool_exp
    _or: [wpt_set_details_bool_exp!]
    created_at: timestamp_comparison_exp
    is_archived: Boolean_comparison_exp
    note: String_comparison_exp
    rep_count: Int_comparison_exp
    rest_time_before: Int_comparison_exp
    set_detail_id: uuid_comparison_exp
    set_reference_id: uuid_comparison_exp
    weight: float8_comparison_exp
    weight_adjustment: jsonb_comparison_exp
    weight_text: String_comparison_exp
    wpt_completed_sets: wpt_completed_sets_bool_exp
    wpt_completed_sets_aggregate: wpt_completed_sets_aggregate_bool_exp
    wpt_set_reference: wpt_set_references_bool_exp
}

"delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
input wpt_set_details_delete_at_path_input {
    weight_adjustment: [String!]
}

"delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
input wpt_set_details_delete_elem_input {
    weight_adjustment: Int
}

"delete key/value pair or string element. key/value pairs are matched based on their key value"
input wpt_set_details_delete_key_input {
    weight_adjustment: String
}

"input type for incrementing numeric columns in table \"wpt_set_details\""
input wpt_set_details_inc_input {
    rep_count: Int
    rest_time_before: Int
    weight: float8
}

"input type for inserting data into table \"wpt_set_details\""
input wpt_set_details_insert_input {
    created_at: timestamp
    is_archived: Boolean
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    set_reference_id: uuid
    weight: float8
    weight_adjustment: jsonb
    weight_text: String
    wpt_completed_sets: wpt_completed_sets_arr_rel_insert_input
    wpt_set_reference: wpt_set_references_obj_rel_insert_input
}

"order by max() on columns of table \"wpt_set_details\""
input wpt_set_details_max_order_by {
    created_at: order_by
    note: order_by
    rep_count: order_by
    rest_time_before: order_by
    set_detail_id: order_by
    set_reference_id: order_by
    weight: order_by
    weight_text: order_by
}

"order by min() on columns of table \"wpt_set_details\""
input wpt_set_details_min_order_by {
    created_at: order_by
    note: order_by
    rep_count: order_by
    rest_time_before: order_by
    set_detail_id: order_by
    set_reference_id: order_by
    weight: order_by
    weight_text: order_by
}

"input type for inserting object relation for remote table \"wpt_set_details\""
input wpt_set_details_obj_rel_insert_input {
    data: wpt_set_details_insert_input!
    "upsert condition"
    on_conflict: wpt_set_details_on_conflict
}

"on_conflict condition type for table \"wpt_set_details\""
input wpt_set_details_on_conflict {
    constraint: wpt_set_details_constraint!
    update_columns: [wpt_set_details_update_column!]! = []
    where: wpt_set_details_bool_exp
}

"Ordering options when selecting data from \"wpt_set_details\"."
input wpt_set_details_order_by {
    created_at: order_by
    is_archived: order_by
    note: order_by
    rep_count: order_by
    rest_time_before: order_by
    set_detail_id: order_by
    set_reference_id: order_by
    weight: order_by
    weight_adjustment: order_by
    weight_text: order_by
    wpt_completed_sets_aggregate: wpt_completed_sets_aggregate_order_by
    wpt_set_reference: wpt_set_references_order_by
}

"primary key columns input for table: wpt_set_details"
input wpt_set_details_pk_columns_input {
    set_detail_id: uuid!
}

"prepend existing jsonb value of filtered columns with new jsonb value"
input wpt_set_details_prepend_input {
    weight_adjustment: jsonb
}

"input type for updating data in table \"wpt_set_details\""
input wpt_set_details_set_input {
    created_at: timestamp
    is_archived: Boolean
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    set_reference_id: uuid
    weight: float8
    weight_adjustment: jsonb
    weight_text: String
}

"order by stddev() on columns of table \"wpt_set_details\""
input wpt_set_details_stddev_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by stddev_pop() on columns of table \"wpt_set_details\""
input wpt_set_details_stddev_pop_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by stddev_samp() on columns of table \"wpt_set_details\""
input wpt_set_details_stddev_samp_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"Streaming cursor of the table \"wpt_set_details\""
input wpt_set_details_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: wpt_set_details_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input wpt_set_details_stream_cursor_value_input {
    created_at: timestamp
    is_archived: Boolean
    note: String
    rep_count: Int
    rest_time_before: Int
    set_detail_id: uuid
    set_reference_id: uuid
    weight: float8
    weight_adjustment: jsonb
    weight_text: String
}

"order by sum() on columns of table \"wpt_set_details\""
input wpt_set_details_sum_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

input wpt_set_details_updates {
    "append existing jsonb value of filtered columns with new jsonb value"
    _append: wpt_set_details_append_input
    "delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
    _delete_at_path: wpt_set_details_delete_at_path_input
    "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
    _delete_elem: wpt_set_details_delete_elem_input
    "delete key/value pair or string element. key/value pairs are matched based on their key value"
    _delete_key: wpt_set_details_delete_key_input
    "increments the numeric columns with given value of the filtered values"
    _inc: wpt_set_details_inc_input
    "prepend existing jsonb value of filtered columns with new jsonb value"
    _prepend: wpt_set_details_prepend_input
    "sets the columns of the filtered rows to the given values"
    _set: wpt_set_details_set_input
    "filter the rows which have to be updated"
    where: wpt_set_details_bool_exp!
}

"order by var_pop() on columns of table \"wpt_set_details\""
input wpt_set_details_var_pop_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by var_samp() on columns of table \"wpt_set_details\""
input wpt_set_details_var_samp_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

"order by variance() on columns of table \"wpt_set_details\""
input wpt_set_details_variance_order_by {
    rep_count: order_by
    rest_time_before: order_by
    weight: order_by
}

input wpt_set_references_aggregate_bool_exp {
    bool_and: wpt_set_references_aggregate_bool_exp_bool_and
    bool_or: wpt_set_references_aggregate_bool_exp_bool_or
    count: wpt_set_references_aggregate_bool_exp_count
}

input wpt_set_references_aggregate_bool_exp_bool_and {
    arguments: wpt_set_references_select_column_wpt_set_references_aggregate_bool_exp_bool_and_arguments_columns!
    distinct: Boolean
    filter: wpt_set_references_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_set_references_aggregate_bool_exp_bool_or {
    arguments: wpt_set_references_select_column_wpt_set_references_aggregate_bool_exp_bool_or_arguments_columns!
    distinct: Boolean
    filter: wpt_set_references_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_set_references_aggregate_bool_exp_count {
    arguments: [wpt_set_references_select_column!]
    distinct: Boolean
    filter: wpt_set_references_bool_exp
    predicate: Int_comparison_exp!
}

"order by aggregate values of table \"wpt_set_references\""
input wpt_set_references_aggregate_order_by {
    avg: wpt_set_references_avg_order_by
    count: order_by
    max: wpt_set_references_max_order_by
    min: wpt_set_references_min_order_by
    stddev: wpt_set_references_stddev_order_by
    stddev_pop: wpt_set_references_stddev_pop_order_by
    stddev_samp: wpt_set_references_stddev_samp_order_by
    sum: wpt_set_references_sum_order_by
    var_pop: wpt_set_references_var_pop_order_by
    var_samp: wpt_set_references_var_samp_order_by
    variance: wpt_set_references_variance_order_by
}

"input type for inserting array relation for remote table \"wpt_set_references\""
input wpt_set_references_arr_rel_insert_input {
    data: [wpt_set_references_insert_input!]!
    "upsert condition"
    on_conflict: wpt_set_references_on_conflict
}

"order by avg() on columns of table \"wpt_set_references\""
input wpt_set_references_avg_order_by {
    order_number: order_by
}

"Boolean expression to filter rows from the table \"wpt_set_references\". All fields are combined with a logical 'AND'."
input wpt_set_references_bool_exp {
    _and: [wpt_set_references_bool_exp!]
    _not: wpt_set_references_bool_exp
    _or: [wpt_set_references_bool_exp!]
    is_archived: Boolean_comparison_exp
    note: String_comparison_exp
    order_number: Int_comparison_exp
    set_reference_id: uuid_comparison_exp
    workout_exercise_id: uuid_comparison_exp
    wpt_set_details: wpt_set_details_bool_exp
    wpt_set_details_aggregate: wpt_set_details_aggregate_bool_exp
    wpt_workout_exercise: wpt_workout_exercises_bool_exp
}

"input type for incrementing numeric columns in table \"wpt_set_references\""
input wpt_set_references_inc_input {
    order_number: Int
}

"input type for inserting data into table \"wpt_set_references\""
input wpt_set_references_insert_input {
    is_archived: Boolean
    note: String
    order_number: Int
    set_reference_id: uuid
    workout_exercise_id: uuid
    wpt_set_details: wpt_set_details_arr_rel_insert_input
    wpt_workout_exercise: wpt_workout_exercises_obj_rel_insert_input
}

"order by max() on columns of table \"wpt_set_references\""
input wpt_set_references_max_order_by {
    note: order_by
    order_number: order_by
    set_reference_id: order_by
    workout_exercise_id: order_by
}

"order by min() on columns of table \"wpt_set_references\""
input wpt_set_references_min_order_by {
    note: order_by
    order_number: order_by
    set_reference_id: order_by
    workout_exercise_id: order_by
}

"input type for inserting object relation for remote table \"wpt_set_references\""
input wpt_set_references_obj_rel_insert_input {
    data: wpt_set_references_insert_input!
    "upsert condition"
    on_conflict: wpt_set_references_on_conflict
}

"on_conflict condition type for table \"wpt_set_references\""
input wpt_set_references_on_conflict {
    constraint: wpt_set_references_constraint!
    update_columns: [wpt_set_references_update_column!]! = []
    where: wpt_set_references_bool_exp
}

"Ordering options when selecting data from \"wpt_set_references\"."
input wpt_set_references_order_by {
    is_archived: order_by
    note: order_by
    order_number: order_by
    set_reference_id: order_by
    workout_exercise_id: order_by
    wpt_set_details_aggregate: wpt_set_details_aggregate_order_by
    wpt_workout_exercise: wpt_workout_exercises_order_by
}

"primary key columns input for table: wpt_set_references"
input wpt_set_references_pk_columns_input {
    set_reference_id: uuid!
}

"input type for updating data in table \"wpt_set_references\""
input wpt_set_references_set_input {
    is_archived: Boolean
    note: String
    order_number: Int
    set_reference_id: uuid
    workout_exercise_id: uuid
}

"order by stddev() on columns of table \"wpt_set_references\""
input wpt_set_references_stddev_order_by {
    order_number: order_by
}

"order by stddev_pop() on columns of table \"wpt_set_references\""
input wpt_set_references_stddev_pop_order_by {
    order_number: order_by
}

"order by stddev_samp() on columns of table \"wpt_set_references\""
input wpt_set_references_stddev_samp_order_by {
    order_number: order_by
}

"Streaming cursor of the table \"wpt_set_references\""
input wpt_set_references_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: wpt_set_references_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input wpt_set_references_stream_cursor_value_input {
    is_archived: Boolean
    note: String
    order_number: Int
    set_reference_id: uuid
    workout_exercise_id: uuid
}

"order by sum() on columns of table \"wpt_set_references\""
input wpt_set_references_sum_order_by {
    order_number: order_by
}

input wpt_set_references_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: wpt_set_references_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: wpt_set_references_set_input
    "filter the rows which have to be updated"
    where: wpt_set_references_bool_exp!
}

"order by var_pop() on columns of table \"wpt_set_references\""
input wpt_set_references_var_pop_order_by {
    order_number: order_by
}

"order by var_samp() on columns of table \"wpt_set_references\""
input wpt_set_references_var_samp_order_by {
    order_number: order_by
}

"order by variance() on columns of table \"wpt_set_references\""
input wpt_set_references_variance_order_by {
    order_number: order_by
}

input wpt_workout_exercises_aggregate_bool_exp {
    bool_and: wpt_workout_exercises_aggregate_bool_exp_bool_and
    bool_or: wpt_workout_exercises_aggregate_bool_exp_bool_or
    count: wpt_workout_exercises_aggregate_bool_exp_count
}

input wpt_workout_exercises_aggregate_bool_exp_bool_and {
    arguments: wpt_workout_exercises_select_column_wpt_workout_exercises_aggregate_bool_exp_bool_and_arguments_columns!
    distinct: Boolean
    filter: wpt_workout_exercises_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_workout_exercises_aggregate_bool_exp_bool_or {
    arguments: wpt_workout_exercises_select_column_wpt_workout_exercises_aggregate_bool_exp_bool_or_arguments_columns!
    distinct: Boolean
    filter: wpt_workout_exercises_bool_exp
    predicate: Boolean_comparison_exp!
}

input wpt_workout_exercises_aggregate_bool_exp_count {
    arguments: [wpt_workout_exercises_select_column!]
    distinct: Boolean
    filter: wpt_workout_exercises_bool_exp
    predicate: Int_comparison_exp!
}

"order by aggregate values of table \"wpt_workout_exercises\""
input wpt_workout_exercises_aggregate_order_by {
    avg: wpt_workout_exercises_avg_order_by
    count: order_by
    max: wpt_workout_exercises_max_order_by
    min: wpt_workout_exercises_min_order_by
    stddev: wpt_workout_exercises_stddev_order_by
    stddev_pop: wpt_workout_exercises_stddev_pop_order_by
    stddev_samp: wpt_workout_exercises_stddev_samp_order_by
    sum: wpt_workout_exercises_sum_order_by
    var_pop: wpt_workout_exercises_var_pop_order_by
    var_samp: wpt_workout_exercises_var_samp_order_by
    variance: wpt_workout_exercises_variance_order_by
}

"input type for inserting array relation for remote table \"wpt_workout_exercises\""
input wpt_workout_exercises_arr_rel_insert_input {
    data: [wpt_workout_exercises_insert_input!]!
    "upsert condition"
    on_conflict: wpt_workout_exercises_on_conflict
}

"order by avg() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_avg_order_by {
    order_number: order_by
}

"Boolean expression to filter rows from the table \"wpt_workout_exercises\". All fields are combined with a logical 'AND'."
input wpt_workout_exercises_bool_exp {
    _and: [wpt_workout_exercises_bool_exp!]
    _not: wpt_workout_exercises_bool_exp
    _or: [wpt_workout_exercises_bool_exp!]
    exercise_id: uuid_comparison_exp
    is_archived: Boolean_comparison_exp
    note: String_comparison_exp
    order_number: Int_comparison_exp
    workout_exercise_id: uuid_comparison_exp
    workout_id: uuid_comparison_exp
    wpt_exercise: wpt_exercises_bool_exp
    wpt_set_references: wpt_set_references_bool_exp
    wpt_set_references_aggregate: wpt_set_references_aggregate_bool_exp
    wpt_workout: wpt_workouts_bool_exp
}

"input type for incrementing numeric columns in table \"wpt_workout_exercises\""
input wpt_workout_exercises_inc_input {
    order_number: Int
}

"input type for inserting data into table \"wpt_workout_exercises\""
input wpt_workout_exercises_insert_input {
    exercise_id: uuid
    is_archived: Boolean
    note: String
    order_number: Int
    workout_exercise_id: uuid
    workout_id: uuid
    wpt_exercise: wpt_exercises_obj_rel_insert_input
    wpt_set_references: wpt_set_references_arr_rel_insert_input
    wpt_workout: wpt_workouts_obj_rel_insert_input
}

"order by max() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_max_order_by {
    exercise_id: order_by
    note: order_by
    order_number: order_by
    workout_exercise_id: order_by
    workout_id: order_by
}

"order by min() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_min_order_by {
    exercise_id: order_by
    note: order_by
    order_number: order_by
    workout_exercise_id: order_by
    workout_id: order_by
}

"input type for inserting object relation for remote table \"wpt_workout_exercises\""
input wpt_workout_exercises_obj_rel_insert_input {
    data: wpt_workout_exercises_insert_input!
    "upsert condition"
    on_conflict: wpt_workout_exercises_on_conflict
}

"on_conflict condition type for table \"wpt_workout_exercises\""
input wpt_workout_exercises_on_conflict {
    constraint: wpt_workout_exercises_constraint!
    update_columns: [wpt_workout_exercises_update_column!]! = []
    where: wpt_workout_exercises_bool_exp
}

"Ordering options when selecting data from \"wpt_workout_exercises\"."
input wpt_workout_exercises_order_by {
    exercise_id: order_by
    is_archived: order_by
    note: order_by
    order_number: order_by
    workout_exercise_id: order_by
    workout_id: order_by
    wpt_exercise: wpt_exercises_order_by
    wpt_set_references_aggregate: wpt_set_references_aggregate_order_by
    wpt_workout: wpt_workouts_order_by
}

"primary key columns input for table: wpt_workout_exercises"
input wpt_workout_exercises_pk_columns_input {
    workout_exercise_id: uuid!
}

"input type for updating data in table \"wpt_workout_exercises\""
input wpt_workout_exercises_set_input {
    exercise_id: uuid
    is_archived: Boolean
    note: String
    order_number: Int
    workout_exercise_id: uuid
    workout_id: uuid
}

"order by stddev() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_stddev_order_by {
    order_number: order_by
}

"order by stddev_pop() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_stddev_pop_order_by {
    order_number: order_by
}

"order by stddev_samp() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_stddev_samp_order_by {
    order_number: order_by
}

"Streaming cursor of the table \"wpt_workout_exercises\""
input wpt_workout_exercises_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: wpt_workout_exercises_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input wpt_workout_exercises_stream_cursor_value_input {
    exercise_id: uuid
    is_archived: Boolean
    note: String
    order_number: Int
    workout_exercise_id: uuid
    workout_id: uuid
}

"order by sum() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_sum_order_by {
    order_number: order_by
}

input wpt_workout_exercises_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: wpt_workout_exercises_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: wpt_workout_exercises_set_input
    "filter the rows which have to be updated"
    where: wpt_workout_exercises_bool_exp!
}

"order by var_pop() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_var_pop_order_by {
    order_number: order_by
}

"order by var_samp() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_var_samp_order_by {
    order_number: order_by
}

"order by variance() on columns of table \"wpt_workout_exercises\""
input wpt_workout_exercises_variance_order_by {
    order_number: order_by
}

"Boolean expression to filter rows from the table \"wpt_workouts\". All fields are combined with a logical 'AND'."
input wpt_workouts_bool_exp {
    _and: [wpt_workouts_bool_exp!]
    _not: wpt_workouts_bool_exp
    _or: [wpt_workouts_bool_exp!]
    day_of_week: Int_comparison_exp
    is_archived: Boolean_comparison_exp
    name: String_comparison_exp
    note: String_comparison_exp
    user_uid: String_comparison_exp
    workout_id: uuid_comparison_exp
    wpt_completed_workouts: wpt_completed_workouts_bool_exp
    wpt_completed_workouts_aggregate: wpt_completed_workouts_aggregate_bool_exp
    wpt_workout_exercises: wpt_workout_exercises_bool_exp
    wpt_workout_exercises_aggregate: wpt_workout_exercises_aggregate_bool_exp
}

"input type for incrementing numeric columns in table \"wpt_workouts\""
input wpt_workouts_inc_input {
    day_of_week: Int
}

"input type for inserting data into table \"wpt_workouts\""
input wpt_workouts_insert_input {
    day_of_week: Int
    is_archived: Boolean
    name: String
    note: String
    user_uid: String
    workout_id: uuid
    wpt_completed_workouts: wpt_completed_workouts_arr_rel_insert_input
    wpt_workout_exercises: wpt_workout_exercises_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"wpt_workouts\""
input wpt_workouts_obj_rel_insert_input {
    data: wpt_workouts_insert_input!
    "upsert condition"
    on_conflict: wpt_workouts_on_conflict
}

"on_conflict condition type for table \"wpt_workouts\""
input wpt_workouts_on_conflict {
    constraint: wpt_workouts_constraint!
    update_columns: [wpt_workouts_update_column!]! = []
    where: wpt_workouts_bool_exp
}

"Ordering options when selecting data from \"wpt_workouts\"."
input wpt_workouts_order_by {
    day_of_week: order_by
    is_archived: order_by
    name: order_by
    note: order_by
    user_uid: order_by
    workout_id: order_by
    wpt_completed_workouts_aggregate: wpt_completed_workouts_aggregate_order_by
    wpt_workout_exercises_aggregate: wpt_workout_exercises_aggregate_order_by
}

"primary key columns input for table: wpt_workouts"
input wpt_workouts_pk_columns_input {
    workout_id: uuid!
}

"input type for updating data in table \"wpt_workouts\""
input wpt_workouts_set_input {
    day_of_week: Int
    is_archived: Boolean
    name: String
    note: String
    user_uid: String
    workout_id: uuid
}

"Streaming cursor of the table \"wpt_workouts\""
input wpt_workouts_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: wpt_workouts_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input wpt_workouts_stream_cursor_value_input {
    day_of_week: Int
    is_archived: Boolean
    name: String
    note: String
    user_uid: String
    workout_id: uuid
}

input wpt_workouts_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: wpt_workouts_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: wpt_workouts_set_input
    "filter the rows which have to be updated"
    where: wpt_workouts_bool_exp!
}
